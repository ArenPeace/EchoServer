查看系统中so文件版本


linux
./bjam--build-type=minimal--with-date_time--with-filesystem--with-program_options--with-regex--with-serialization--with-system--with-threadvariant=releaselink=staticthreading=multistage

bjam--show-libraries

cdboost_1_57_0
bashbootstrap.sh
./b2


yumgroupinstall"DevelopmentTools"--安装基本开发包

================================================================================================
systemctldisablefirewalld.service关闭防火墙
常用
ll
第1列：drwxr-xr-x代表文件的类型及权限；以d开头的为文件夹，以-开头的为文件，以l开头的为连接文件；
第2列：文件的链接数.
第3、4列：拥有文件的用户及组
第5列：文件的大小。
第6列：文件最后的修改时间。
第7列：文件名

ps-aux
ps-elf|grep[特征]
#进程5种状态：
R运行runnable(orrunqueue)
S中断sleeping
D不可中断uninterruptiblesleep(usuallyIO)
Z僵死adefunc("zombie")process
T停止tracedorstopped

chmod777【：redis-server】

./redis-server&
(加&表示后台运行。）

kill-96617
强制杀掉6617进程；

killall-9；

gcctest.c-otest

g++-otest.exetest.cpp

tail-n10[filename]
调试
gdb[program]
gdb[program]core///用gdb查看coredump文件，跟踪程序core的原因
gdb[program][pid]///用gdb调试已经开始运行的程序，指定pid即可
gdb-command=gdbinit[program]
>l//列出源码回车重复上一次命令
>break[line_no]
>break[func_name]
>delete[line_no]
>delete://deleteallbreakpoint
>clear[line_no]
>clear[func_name|file_name]
>infobreak
>r//runtheprogram
>n//next
>c//continue/cont
>s//stepin
>p[variable_name]//print
>bt//backtrace
>finish//quitoutafunction
>infothreads//multithreads
>thread[ID]//switchtothreadid
>setdetach-on-forkoff
>showdetach-on-fork
>catchfork
>infoinferiors//multiprocess
>inferior[ID]//switchtoprocessid
只需要设置follow-fork-mode(默认值：parent)和detach-on-fork（默认值：on）即可。
follow-fork-modedetach-on-fork说明
parenton只调试主进程（GDB默认）
childon只调试子进程
parentoff同时调试两个进程，gdb跟主进程，子进程block在fork位置
childoff同时调试两个进程，gdb跟子进程，主进程block在fork位置
设置方法：setfollow-fork-mode[parent|child]setdetach-on-fork[on|off]
>setfollow-fork-mode[parent|child]//
>setdetach-on-fork[on|off]静态库的编译链接
1.g++-omylib.o-cmylib.cpp//编译
2.arrcslibmylib.amylib.o//打包成静态库
3.cplibmylib.a/usr/lib/libmylib.a//拷贝到linux的库目录
4.gcc-otesttest.cpp-lmylib//链接mylib.a编译生成可执行程序。
5../test运行可执行程序
其中，
-g支持gdb调试

动态库的编译链接
1.g++-fpic-ccalc.cpp//编译出与位置无关的代码Position-IndependentCode
2.g++-shared-olibtcalc.socalc.o//生成共享库（或者叫动态库）
2.1.eportLD_LIBRARY_PATH='pwd':$LD_LIBRARY_PATH//把当前路径（动态库所在路径）放到程序搜索路径中。超级用户sudo也可拷贝.so文件到/lib下
3.g++-otesttest.cpp-L./-lcalc//链接libcalc.so生成可执行代码
其中，1.和2.两步可合并成一步：
gcc-fpic-sharedcalc.cpp-olibcalc.so

ldd[program]查看程序的库依赖关系，如果没有继续下一步
在/etc/ld.so.conf.d/建立动态库相应的配置文件[so].conf，里面添加上动态库的绝对路径
ldconfig重建/etc/ld.so.cache

makezl_cgi_release2>&1|teebuild.log

查看生成时，是否使用-fPIC
ar-xliblog4cplus.a
readelf--relocsfileappender.o|egrep'(GOT|PLT|JU?MP_SLOT)'

find/[dirname]-name[filename]//目录中查找目录
grep-i"[str]"[filename]

.sh文件执行权限不够
可以sh./*.sh
也可以chmod+x*.sh然后再./*.sh
配置configure=》编译make=》安装makeinstall=》卸载makeuninstall
./configure--prefix=/usr/local/test
configure需要执行权限，如果不能执行，可以前头加sh

o:编译的目标文件
a:静态库，其实就是把若干o文件打了个包
so:动态链接库（共享库）
lo:使用libtool编译出的目标文件，其实就是在o文件中添加了一些信息
la:使用libtool编译出的库文件，其实是个文本文件，记录同名动态库和静态库的相关信息

echo$LIBRARY_PATH

如果没有配置--prefix选项，源码包也没有提供makeuninstall，则可以通过以下方式可以完整卸载：
找一个临时目录重新安装一遍，如：
$./configure--prefix=/tmp/to_remove&&makeinstall
然后遍历/tmp/to_remove的文件，删除对应安装位置的文件即可（因为/tmp/to_remove里的目录结构就是没有配置--prefix选项时的目录结构）。

GNU的make工作时的执行步骤入下：（想来其它的make也是类似）
1.读入所有的Makefile。
2.读入被include的其它Makefile。
3.初始化文件中的变量。
4.推导隐晦规则，并分析所有规则。
5.为所有的目标文件创建依赖关系链。
6.根据依赖关系，决定哪些目标要重新生成。
7.执行生成命令。

ldconfig
//主要是在默认搜寻目录(/lib和/usr/lib)以及动态库配置文件/etc/ld.so.conf内所列的目录下,搜索出可共享的动态链接库(格式如前介绍,lib*.so*),
进而创建出动态装入程序(ld.so)所需的连接和缓存文件.缓存文件默认为/etc/ld.so.cache,此文件保存已排好序的动态链接库名字列表.
ldd[exe]//查看可执行文件依赖的动态库
find/-name[lib]//查找lib文件位置
vim/etc/ld.so.conf//CentOS7中是在/etc/ld.so.conf/下添加新目录
/sbin/ldconfig//配置环境
压缩文件格式有.zip.tar.gz.tar.bz2.rar
打包及解压.zip
zip-q-r[打包名][文件/文件夹]
unzip-l//列出内容-v//显示执行过程[zip文件]
打包和打包成gz及bz2
tar-cf[打包名][文件/文件夹]//createfile//cvfviewthedetail
tar-zcvf[打包名][文件/文件夹]//creategzipfile
tar-jcvf[打包名][文件/文件夹]//createbzip2file
tar-zxvpf[打包名][文件/文件夹]//保留原文件属性property
tar-rf[打包名][文件/文件夹]//增加文件
tar-uf[打包名][文件/文件夹]//更新文件
tar-xf[打包名]//解压文件
共享内存
ipcs//查看shm状态
ipcrm-M0x00ee0008//清空数据
./test_shmshow
ipcs-mp
svncheckout[path]同svnco
svnaddfile
svncommit-m"msg"
svnlock-m"msg"
svnupdate-rm[path]
svnstatuspath
svndeletepath-m[msg]
svnlogpath
svninfopath
svndifffile
svnmerge-rm:npath
svnhelp
svnhelpci
svndiff--diff-cmd"diff"-x"-q".|grepIndex|cut-d""-f2//查看已变更的文件

获取linux下svn密码
cd~/.subversion/auth/svn.simple/
vi[....]
md5sum[filename]查看文件的md5生成码
创建符号连接
ln-s[原文件或目录][符号连接]
创建硬连接
ln[原文件或目录][符号连接]
用户及用户组管理
who当前用户
cat

:s/vivian/sky/替换当前行第一个vivian为sky
:s/vivian/sky/g替换当前行所有vivian为sky
:n,$s/vivian/sky/替换第n行开始到最后一行中每一行的第一个vivian为sky
:n,$s/vivian/sky/g替换第n行开始到最后一行中每一行所有vivian为sky
（n为数字，若n为.，表示从当前行开始到最后一行）
:%s/vivian/sky/（等同于:g/vivian/s//sky/）替换每一行的第一个vivian为sky
:%s/vivian/sky/g（等同于:g/vivian/s//sky/g）替换每一行中所有vivian为sky

:.,$s【被替换符串】/【符串2】/g

:1d删除一行
:1,10d删除1到10行

more/var/log/secure
who/var/log/wtmp
users
useradd-d/usr/sam-msam
addusersam
passwdsam
idsam查看用户sam

userdel
goupadd

strace-p[pid]//跟踪pid进程的堆栈及信号信息
stat查看文件创建时间、修改时间、等信息
whereis[process]
which[process]
netstat-ano|grep
netstat-apn|grep80
vi/etc/sysconfig/iptables

grep[keyword]*
打造Vim版C++IDE
http://www.cnblogs.com/YUEYongpeng/p/3656045.html
date-s"2016-12-3112:00:00"
pwdx查看进程的执行文件路径
du-ah--max-depth=1

================================================================================================
================================================================================================
================================================================================================
================================================================================================
================================================================================================

